name: Build Installers (macOS & Windows)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Override version (defaults to tag sans 'v' or 0.0.0-dev)"
        required: false
        default: ""

jobs:
  build:
    name: Build & Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            qt-arch: clang_64
          - os: windows-2022
            qt-arch: win64_msvc2022_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.9.2
          arch: ${{ matrix.qt-arch }}
          cache: true
          aqtversion: "==3.*"

      - name: Setup CMake
        uses: actions/setup-cmake@v4

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja --no-progress

      - name: Compute VERSION
        id: ver
        shell: bash
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          set -euo pipefail
          if [[ -n "${INPUT_VERSION}" ]]; then
            ver="${INPUT_VERSION}"
          elif [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" == v* ]]; then
            ver="${GITHUB_REF_NAME#v}"
          else
            ver="0.0.0-dev+${GITHUB_RUN_NUMBER}"
          fi
          echo "VERSION=$ver" | tee -a "$GITHUB_ENV"
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      # ---------- Configure & Build ----------
      - name: Configure (Release)
        shell: bash
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="${QT_ROOT_DIR}"

      - name: Build (Release)
        shell: bash
        run: cmake --build build --parallel

      # ---------- macOS packaging ----------
      - name: Package macOS (.dmg)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euxo pipefail
          APP_BUNDLE="$(find build -maxdepth 1 -name '*.app' | head -n 1)"
          if [[ -z "$APP_BUNDLE" ]]; then
            echo "No .app bundle found in build/"; ls -la build; exit 1
          fi

          macdeployqt "$APP_BUNDLE" -verbose=2

          brew install create-dmg
          mkdir -p dist
          DMG_NAME="LiquidSSH-${VERSION}-macOS.dmg"
          create-dmg --overwrite --volname "LiquidSSH ${VERSION}" --app-drop-link 425 200 "$DMG_NAME" "$APP_BUNDLE"
          mv "$DMG_NAME" dist/

      # ---------- Windows packaging ----------
      - name: Install NSIS
        if: runner.os == 'Windows'
        run: choco install nsis --no-progress

      - name: Deploy Qt runtime (windeployqt)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          EXE_NAME="liquidssh.exe"   # <-- change if your target differs
          BUILT_EXE="build/${EXE_NAME}"
          if [[ ! -f "$BUILT_EXE" ]]; then
            BUILT_EXE="build/Release/${EXE_NAME}"
          fi
          if [[ ! -f "$BUILT_EXE" ]]; then
            echo "Could not find built exe ($EXE_NAME)"; find build -maxdepth 3 -type f -name "*.exe" -print
            exit 1
          fi

          mkdir -p package
          cp "$BUILT_EXE" package/
          windeployqt --verbose 2 --dir package "package/${EXE_NAME}"

      - name: Create NSIS installer (.exe)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          cat > installer.nsi <<'NSI'
          !define PRODUCT_NAME "LiquidSSH"
          !define PRODUCT_VERSION "${VERSION}"
          !define EXE_NAME "liquidssh.exe"
          !define INSTALL_DIR "$PROGRAMFILES64\${PRODUCT_NAME}"

          SetCompressor /SOLID lzma
          Unicode true
          RequestExecutionLevel admin
          Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
          OutFile "dist\${PRODUCT_NAME}-${PRODUCT_VERSION}-win64-setup.exe"
          InstallDir "${INSTALL_DIR}"

          Page directory
          Page instfiles
          UninstPage uninstConfirm
          UninstPage instfiles

          Section "Install"
            SetOutPath "${INSTALL_DIR}"
            File /r "package\*.*"
            CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}.lnk" "${INSTALL_DIR}\${EXE_NAME}"
            CreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "${INSTALL_DIR}\${EXE_NAME}"
            WriteUninstaller "${INSTALL_DIR}\Uninstall.exe"
          SectionEnd

          Section "Uninstall"
            Delete "$SMPROGRAMS\${PRODUCT_NAME}.lnk"
            Delete "$DESKTOP\${PRODUCT_NAME}.lnk"
            RMDir /r "${INSTALL_DIR}"
          SectionEnd
          NSI
          # Expand VERSION into the NSI (simple replace)
          sed -i.bak "s/\${VERSION}/${VERSION}/g" installer.nsi
          makensis installer.nsi

      # ---------- Upload artifacts ----------
      - name: Upload macOS DMG
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: LiquidSSH-macOS
          path: dist/*.dmg

      - name: Upload Windows Installer
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: LiquidSSH-Windows
          path: dist/*.exe
